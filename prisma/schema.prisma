generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MAHASISWA
  DOSEN
  ADMIN
}

enum PublishStatus {
  PUBLISHED
  PRIVATE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(MAHASISWA)
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String  @db.Text
  imageUrl  String?
  
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  
  menuItem    MenuItem?
  submenuItem SubMenuItem?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id        String   @id @default(cuid())
  name      String   @unique
  href      String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @unique
  
  submenus  SubMenuItem[]
}

model SubMenuItem {
  id         String   @id @default(cuid())
  name       String
  href       String?
  order      Int      @default(0)
  
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?  @unique

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
}

model RepositoryItem {
  id           String        @id @default(cuid())
  title        String
  author       String
  year         Int
  studyProgram String
  abstract     String?       @db.Text
  keywords     String?
  advisor      String?
  status       PublishStatus @default(PRIVATE)
  publishedAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  files        FileItem[]
}

model FileItem {
  id               String         @id @default(cuid())
  alias            String
  fileName         String
  fileUrl          String
  repositoryItemId String
  repositoryItem   RepositoryItem @relation(fields: [repositoryItemId], references: [id], onDelete: Cascade)
}